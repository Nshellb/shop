[Vue.js] 템플릿을 활용한 Vue.js 개발 - 1. 개발환경 설정
1) vue cli로 프로젝트 생성.
manual -> babel, Router, vuex 선택 -> 모두 enter

2) 예제용 테마 다운로드
https://colorlib.com/wp/ 페이지의 fashe 테마 사용.
(테마 경로 - https://colorlib.com/wp/template/fashe/)
유료화 되었기에 https://github.com/lessipe/vue-fashe/tree/master/public 코드 사용...

3) 예제용 이미지 다운로드
https://picsum.photos/ 페이지의 Random 이미지 사용.
https://picsum.photos/seed/picsum/200/300?random 을 사용.

4) 테마 적용을 위한 기본 템플릿 정리.
npm run serve 로 vue 구동 확인. -> http://localhost:8080/ 로 브라우저 접속하여 확인.
/src/components/HelloWorld.vue 삭제.
/src/views/About.vue 삭제.
/src/views/Home.vue는 template>div 및 script>export default만 남김.
/src/router/index.js 삭제 및 /src/router.js 작성. (기존과 다른 형식의 코드여서 사용해보기로..) (vue-router)
/src/store/index.js 코드 확인 및 main.js의 router 및 store 코드 정정. (vuex)
/src/App.vue 의 template>div 만 남기고 style 태그 삭제

5) 테마 적용
테마의 css, fonts, images, js, vendor 디렉토리를 /public/ 에 넣는다.
테마의 index.html 코드를 /public/index.html 에 옮겨넣는다.
 - css 속성들을 title 아래에 붙여 넣는다. (<!--===~===---> 형태의 주석행들 사이의 코드들.)
 - js 태그를 body 태그 안쪽 제일 아래에 붙여 넣는다. (<!--===~===---> 형태의 주석행들이 감싸는 코드 ~ <script src="js/main.js"></script>까지.)
 - 기타 부수적인 태그들도 (Back to top / container Selection1) div.app 태그틀 이후에 넣는다.
적용한 코드들을 npm run serve(이하 vue 실행) 으로 실행한후 확인한다. (Element 에서 CSS, JS 태그 확인 / Console 에서 Error 없음 확인)

6) 레이아웃 생성 - Header
/src/components/Header.vue 생성.
기본 코드 작성.

<template>
</template>

<script>
export default {
    
}
</script>

테마 index.html의 header 태그를 template 태그 안에 붙여 넣음.

7) 레이아웃 생성 - Header
/src/components/Footer.vue 생성.
기본 코드 작성.

<template>
</template>

<script>
export default {
    
}
</script>

테마 index.html의 footer 태그를 template 태그 안에 붙여 넣음.

8) 추가한 component 적용
App.vue 의 div에 Header 및 Footer 태그를 추가하고 
script에 Header와 Footer를 import 하고 
export default - components에 Header와 Footer를 추가한다.
// @ 경로는 Vue cli가 자동으로 /src와 연결해둔 경로이다.
vue를 실행하여 브라우저로 접속하여 Header와 Footer를 확인할 수 있다.






[Vue.js] 템플릿을 활용한 Vue.js 개발 - 2. 템플릿 구조
1) 우측 상단 Select box 수정
우클릭 - 검사를 통해 해당 요소의 html 태그를 확인할 수 있다.
(이하 git에서 가져온 완성 코드이기에 나는 확인 안됨...) 
select2 라는 태그가 확인되며 이는 패키지지로도 존재한다.(search google)
테마 index.html의 css와 script에도 select2를 확인할 수 있다.
브라우저의 Console에 select2 js 구문을 입력하는 경우 제대로 적용 되는것을 확인할 수 있다.
-> 이는 script가 body 태그 어딘가에는 포함되어 있으나 
   브라우저의 경우 div-app이라는 태그 하나만 있는 상태로 받아오게 된다.


npm run build 명령을 통해서 브라우저가 실제 받게될 html 을 생성.
/dist/index.html이 실제 브라우저가 받아오게될 html 파일.
css 코드와 script 사이에 noscript 항목을 발견할 수 있다.


script load 순서를 보다보면 해결책을 찾을 수 있는데
vue.js logic이 들어있는 /js/app.~를 확인할 수 있고
app.vue의 태그들이 load 되기전에 select2가 실행되기 때문에 오류가 난것으로 확인할 수 있다.


select2의 적용 위치를 결정하기 위해서 
Vue.js 공식 홈페이지에서 lifecycle을 확인하면,

new Vue에서 component를 생성하고
초록 및 노랑 부분은 Vue.js 내부에서 실행되는 부분이다.
흰바탕의 붉은 글씨로 표기되는 beforeCreate 와 같은 부분이 실제 개발자가 코드를 심을 수 있는 부분이다.
(created, mounted, beforeDestroy 부분을 주로 활용)

created :instance 가 생성된 다음 바로 호출된다. 
Vue instance 는 생성 되었지만 화면에 그려진 상태가 아니라서 태그에 접근하지는 못하고 data, method 만 사용 가능한 상태이다.
api 로 data를 가져와서 출력 해야하는 component의 경우 created 에 api 로 data를 가져오는 logic을 넣으면 된다.

mounted : 화면에 그려진뒤 호출된다.
화면에 출력이 되었기 때문에 태그에 접근할 수 있어서 대부분의 작업이 이루어지는 단계이다.
화면 출력(태그 load) 이후에 작업이 이루어져야 하는 코드의 경우 mounted 에 logic을 넣으면 된다.

beforeDestroy : instance 가 제거되기전에 호출된다.
별도의 event listener를 등록한 경우 이곳에서 제거를 진행하는 logic을 넣으면 된다.


/public/index.html의 select2 코드를 잘라내서 
App.vue 파일의 mounted 메소드를 만들고 붙여넣는다. 
(mounted의 경우 methods 영역이 아닌 export default 바로 안쪽에 작성한다.)

vue를 실행하여 확인해보면 제대로 적용되었음을 확인할 수 있다.

2) 우측 상단 장바구니 수정
우클릭 - 검사를 통해 해당 요소의 html 태그를 확인할 수 있다.
class="header-icon1 js-show-header-dropdown"을 확인할 수 있다.

header-icon1 으로 코드를 검색해보면 css 적용만 확인된다. (기능과 관련없음 확인)
js-show-header-dropdown 으로 코드를 검색해보면 /public/js/main.js 안의 script 코드를 확인할 수 있다.

main.js 안의 코드를 확인해 보면 화면 load 후에 동작하는 코드들이 여러개 있음을 확인할 수 있다.
이 코드들을 main.js 안에 $.initialize 라는 함수로 묶어서 안에 모두 정의한뒤(옮겨 넣은뒤)
App.js 안에 mounted 부분에 $.initialize();로 호출한다.
vue를 실행하여 동작을 확인할 수 있다.

추가적으로 select2의 코드도 main.js 의 코드와 같은 성격이기에 
main.js의 $.initialize method 안에 select2 코드도 추가한다.
(한 번에 호출하기 위함.)

vue.js 용으로 생성한 템플릿이 아닌경우 이와 같은 script 문제가 많이 발생하는데
해당 태그에 기능을 부여하는 코드를 찾아서 수정하면 된다. (대체로 mounted 태그에 추가.)






[Vue.js] 템플릿을 활용한 Vue.js 개발 - 3. 라우터 적용하기
vue-router 를 활용해서 url에 맞는 component를 Header 와 Footer 사이에 넣어주고
menu url을 수정할 예정.

1) Home 및 shop page 페이지 반영
router.js 파일에 경로마다 보여줄 component 가 정의되어있다.

views 에 Shop.vue 를 추가하고 router.js 에 shop.vue 를 import 하고 경로와 component를 지정한다.
App.vue 에 접속 경로마다 변경될 곳인 <router-view />를 Header와 Footer 사이에 추가한다.

2) Header 내용의 링크 설정
Header.vue 의 코드를 보면 main menu 에서 li>a 에서 링크를 걸고 있고 
sale-noti class 를 통해서 활성화된 menu 를 표시하고 있다.
구조에 맞춰서 link tag 의 출력을 위해서 
vue-router 에서 제공하는 router-link component를 사용한다.

to attribute 에 home 이라는 router 를 지정해주고 tag 로는 링크인 a 태그를 감쌀 li 태그를 지정한다.
url 과 router 에 지정된 home url 이 동일할 경우 sale-noti 라는 class 적용을 위해서 active-class 에 지정해준다.
url matching test 를 더 명확히 하기 위해서 exact 라는 attribute 를 추가해준다. + shop 도 추가.

topbar-social 의 경우 새창에서 열리는 것들이기에 그냥 a tag를 작성한다.






[Vue.js] 템플릿을 활용한 Vue.js 개발 - 4. API 호출해서 배너 출력하기
Ajax를 사용하여 back-end 에서 data 를 받아오는 구현.
실제 서버는 구현하지 않고 /public/api 를 만들어서 가져옴.

1) api data 만들기
/public/api 디렉토리 생성 및 banner.json 생성. + 코드 작성
배너의 이미지는 상기한 사이트의 random 이미지를 가져옴.
http://localhost:8080/api/banner.json 에서 가져온 data 확인 가능.

2) api 코드 구현
data를 Ajax로 가져와서 Vue.js 내부에서 사용할 수 있도록하는 api 코드 구현
/src/api 디렉토리 생성 및 http.js 생성. + 코드 작성

http.js 안에서 사용하는 axios 패키지 설치.
npm install axios --save-dev

현세대에서는 method 와 url 을 사용해서 용도를 구분하는 REST API(RESTful API) 를 사용.
http.js 에서 Http class 는 put 이나 delete 와 같이 구버전 브라우저에서 지원하지 않는 method 는 
hidden input 에 method 를 담아서 POST 로 보내는 방식을 구현하고
Ajax 를 호출시 banner 처리를 한 번에 할 수 있는 기반을 만들기 위한 class 이다.

http.js 의 Http class 내부에는 기존의 baseUrl 과 넘겨받은 url 을 연결해서 
api 서버를 별도로 운영할 경우 해당하는 주소로 바꿔주는 parseUrl 이 선언되어 있다.

넘겨받은 url 을 바탕으로 ajax 를 호출하는 method 를 구현했다.

get/post 는 기존의 axios 에서 제공하는 것을 그대로 사용했고,
update와 destroy 는 php framework 를 사용하는데 
구버전 브라우저에서 지원하지 않는 method 를 위해서 _method 형태로 post 로 넘겨 사용한다.
data['_method'] = 'put / delete'; 부분을 사용하는 back-end framework 에 맞춰서 사용하면 된다.

최종적으로 Http class 를 통해 ajax 를 호출하여 원하는 data 를 사용할 수 있다.

3) banner data 를 가져와서 사용
banner 의 내용을 가져오는 코드를 /api/banner.js 를 생성하여 작성한다.

4) main 화면의 slide banner 구현
/components/SlideBanner.vue 생성 및 기본 component 코드 작성.
테마의 index.html 코드 중에서 Header 다음의 첫 번째 section 으로 나오는 Slide1 class 코드를 가져와서 
SlideBanner.vue 에 붙여넣는다.

api 를 통해서 banner 가 작동되도록 코드 작성
반복문을 사용하여 구현하기 때문에 한부분만 남겨두고 중복되는 부분을 삭제한다.
script 에 import banner.js 를 import 하고
ajax 를 통해서 data(이미지)를 가져와서 사용하는 코드를 작성한다.

배너를 추가하기 위해서 Home.vue에 SlideBanner.vue 를 import 하고
SlideBanner component 를 추가하고 template 에 추가한다.

브라우저에서 Vue 확장 프로그램을 추가하고 App>Home>SlideBanner 를 확인해보면 banner 의 Object를 확인할 수 있다.

SlideBanner.vue 에서 slick1 아래에 v-for 구문을 통한 banner 를 작성하고 기존의 태그를 넣는다.
유동적으로 변하는 구문들을 vue.js 문법으로 작성한다. (각 요소들을 banner.xx 로 호출.)

사진들이 위에서 아래로 쭉 늘어지는 형태를 갖게 되는데 slick 가 적용되지 않았기 때문이다.
/public/js/slick-custom.js 에서 특정 class 를 찾고 적용시키는 형태이기에 작동하지 않았음을 확인할 수 있다.
3개로 나누어진 코드를 각각 하나의 함수로 묶는다.
이때 slickN 을 selecter 로 사용하고 있기 때문에 this 로 변경해준다.

SlideBanner.vue component 에서 banners 배열의 내용이 한 번에 출력된뒤 slick이 적용되어야한다.
component 내부에서 selecter 로 slick1 을 사용해도 되지만 다른 component 에서 slick1 이라는 class 를 사용할 경우를 대비하여
SlideBanner 안에 있는 Element 를 선택하기 위해서 slick1 을 가진 div 태그에 ref attribute로 slick 이라는 이름을 주고
banners 배열에 ajax response data 를 집어넣고 slick 을 적용해준다.

banners 배열에 값을 넣기는 했지만 slick1 을 호출한 시점은 created method 가 끝나지 않아서
화면에 그려지기 전이기 때문에 동작을 하지 않는다.
nextTick 이라는 method 를 사용한다. nextTick 으로 넘긴 익명 함수는 method 실행이 끝나고 화면에 그려준뒤 실행된다.
(:key 오류는 vue2에서는 고유한 key값 입력이 필요했지만 vue3 에서는 자동으로 넣는다고 한다...)






